////////////////////////////////////////////////////////////////////////
// Generated by github.com/boundedinfinity/enumer
////////////////////////////////////////////////////////////////////////

package asciibox

import (
	"encoding/json"
	"fmt"
	"strings"
)

type Alignment string

const (
	Alignment_Left   Alignment = "left"
	Alignment_Middle Alignment = "middle"
	Alignment_Right  Alignment = "right"
)

var (
	Alignments = []Alignment{
		Alignment_Left,
		Alignment_Middle,
		Alignment_Right,
	}
)

func IsAlignment(v string) bool {
	var f bool

	for _, e := range Alignments {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func AlignmentParse(v string) (Alignment, error) {
	var o Alignment
	var f bool
	n := strings.ToLower(v)

	for _, e := range Alignments {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, ErrAlignmentNotFound(v)
	}

	return o, nil
}

func ErrAlignmentNotFound(v string) error {
	var ss []string

	for _, e := range Alignments {
		ss = append(ss, string(e))
	}

	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(ss, ","),
	)
}

func (t Alignment) String() string {
	return string(t)
}

func (t Alignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *Alignment) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := AlignmentParse(s)

	if err != nil {
		return err
	}

	t = &e

	return nil
}
